What is JSX?
-JSX stands for JavaScript XML and it is an XML-like syntax extension to ECMAScript. Basically it just provides the syntactic sugar for the React.createElement(type, props, ...children) function, giving us expressiveness of JavaScript along with HTML like template syntax. React uses tools like Babel to convert JSX into React.createElement calls.

-(CGPT) JSX is a syntax extension for JavaScript that looks similar to HTML but works within JavaScript files. It allows us to write UI components in a more intuitive and declarative way. Under the hood, JSX gets transformed into regular JavaScript using tools like Babel.

-In the example below, the text inside <h1> tag is returned as JavaScript function to the render function.
    export default function App() {
    Â  return <h1 className="greeting">{"Hello, this is a JSX Code!"}</h1>;
    }

-If you don't use JSX syntax then the respective JavaScript code should be written as below,
    import { createElement } from "react";
    export default function App() {
    Â  return createElement(
    Â Â Â  "h1",
    Â Â Â  { className: "greeting" },
    Â Â Â  "Hello, this is a JSX Code!"
    Â  );
    }


Difference Between Functional and Class-Based Components in React?
- Functional Components (Modern Approach) is a JS function that takes props as an argument and returns JSX. Since React 16.8 introduced Hooks, functional components can now handle state and lifecycle methods.
    const Counter = () => {
    const [count, setCount] = useState(0); // Using useState hook
    return (
        <div>
        <p>Count: {count}</p>
        <button onClick={() => setCount(count + 1)}>Increment</button>
        </div>
    );};

ðŸ”¹ Key Features of Functional Components:
Uses Hooks (useState, useEffect, etc.) for state and lifecycle management. Better performance â€“ No unnecessary overhead from the this keyword.

- Class-Based Components (Older Approach) Before React Hooks, class components were used for managing state and lifecycle methods. They are ES6 classes that extend React.Component and must include a render() method.
    class Counter extends Component {
    constructor(props) {
        super(props);
        this.state = { count: 0 }; // State is handled in the constructor
    }

    increment = () => { this.setState({ count: this.state.count + 1 }); // Updating state };

    render() {
        return (
        <div>
            <p>Count: {this.state.count}</p>
            <button onClick={this.increment}>Increment</button>
        </div>
        );
    }}

ðŸ”¹ Key Features of Class-Based Components:
Uses this.state for state management â€“ State updates require setState().
Lifecycle methods (componentDidMount, componentDidUpdate, componentWillUnmount) can be replaced with useEffect().

Comparison Table
Feature                 Functional Component                    Class-Based Component 
Syntax	                Simple function returning JSX	    ES6 class extending React.Component
State Management	useState()                          Hook	this.state and setState()
Lifecycle Methods	useEffect() Hook	            componentDidMount(), componentWillUnmount()
Performance	Faster  (no this binding)	            Slower due to this binding


What are Pure Components?
- Pure components are the components which render the same output for the same state and props. In function components, you can achieve these pure components through memoized React.memo() API wrapping around the component. This API prevents unnecessary re-renders by comparing the previous props and new props using shallow comparison. So it will be helpful for performance optimizations.
    const Counter = memo(({ count }) => {
    console.log("Counter component re-rendered!");
    return <p>Count: {count}</p>;
    });

    const App = () => {
    const [count, setCount] = useState(0);

    return (
        <div>
        <Counter count={count} />
        <button onClick={() => setCount(count + 1)}>Increment</button>
        </div>
    );
    };


What are Props in React?
-Props (short for "properties") in React are read-only inputs that allow data to be passed from a parent component to a child component. They enable reusability and make components dynamic by allowing different data to be displayed without modifying the component itself. props are used to pass data from one component to another, usually from a parent to a child. Props are immutable, meaning they cannot be modified inside the child component. They help make components reusable and flexible.


What is the Virtual DOM in React?
- The Virtual DOM (VDOM) is a lightweight JavaScript representation of the real DOM (Document Object Model). React uses it to efficiently update and render UI changes by minimizing direct manipulation of the actual DOM, which is slow. In React, the Virtual DOM is an in-memory representation of the actual DOM.

-When a componentâ€™s state or props change:
    React creates a new Virtual DOM tree (a copy of the UI).
    It compares (diffs) the new Virtual DOM with the previous one using a process called Reconciliation.
    React calculates the minimal changes needed and efficiently updates the actual DOM.
    This improves performance because React updates only the necessary parts instead of re-rendering the entire page.


What is Lazy Loading in React?
- Lazy Loading in React is a performance optimization technique that delays the loading of components until they are needed. This reduces the initial bundle size and improves the appâ€™s performance by loading only the required parts of the application.

- In React, lazy loading helps optimize performance by loading components only when they are needed, instead of loading everything at once. React provides the React.lazy() function to dynamically import components. This works well for code splitting, ensuring that users download only the necessary code instead of the entire application upfront.


What are Hooks in React?
- Hooks are special functions in React that let you use state and lifecycle features in functional components. they allow functional components to have the same capabilities as class components without writing a class.

- Before hooks, React used class components for managing state and lifecycle methods.

useState â†’ Manages state
useEffect â†’ Handles side effects
useContext â†’ Accesses context
useRef â†’ Works with DOM references
useMemo & useCallback â†’ Optimize performance

- Hooks follow rules:
Only call hooks at the top level (not inside loops or conditions).
Only call hooks inside React functional components or custom hooks.


What is Code-Splitting in React?
- Code-splitting is a technique used in React to split the applicationâ€™s JavaScript bundle into smaller chunks, loading them only when needed. This improves performance by reducing the initial load time.

- By default, React bundles all components into a single large JavaScript file. This can slow down page loading, especially for large applications. Code-splitting helps optimize performance by loading only the necessary JavaScript when a specific component is required. React achieves this using dynamic imports (import()), React.lazy(), and React.Suspense.